{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ReCaptchaInstance_1 = require(\"./ReCaptchaInstance\");\n\nvar ELoadingState;\n\n(function (ELoadingState) {\n  ELoadingState[ELoadingState[\"NOT_LOADED\"] = 0] = \"NOT_LOADED\";\n  ELoadingState[ELoadingState[\"LOADING\"] = 1] = \"LOADING\";\n  ELoadingState[ELoadingState[\"LOADED\"] = 2] = \"LOADED\";\n})(ELoadingState || (ELoadingState = {}));\n\nvar ReCaptchaLoader = function () {\n  function ReCaptchaLoader() {}\n\n  ReCaptchaLoader.load = function (siteKey, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (typeof document === 'undefined') {\n      return Promise.reject(new Error('This is a library for the browser!'));\n    }\n\n    if (ReCaptchaLoader.getLoadingState() === ELoadingState.LOADED) {\n      if (ReCaptchaLoader.instance.getSiteKey() === siteKey) {\n        return Promise.resolve(ReCaptchaLoader.instance);\n      } else {\n        return Promise.reject(new Error('reCAPTCHA already loaded with different site key!'));\n      }\n    }\n\n    if (ReCaptchaLoader.getLoadingState() === ELoadingState.LOADING) {\n      if (siteKey !== ReCaptchaLoader.instanceSiteKey) {\n        return Promise.reject(new Error('reCAPTCHA already loaded with different site key!'));\n      }\n\n      return new Promise(function (resolve, reject) {\n        ReCaptchaLoader.successfulLoadingConsumers.push(function (instance) {\n          return resolve(instance);\n        });\n        ReCaptchaLoader.errorLoadingRunnable.push(function (reason) {\n          return reject(reason);\n        });\n      });\n    }\n\n    ReCaptchaLoader.instanceSiteKey = siteKey;\n    ReCaptchaLoader.setLoadingState(ELoadingState.LOADING);\n    var loader = new ReCaptchaLoader();\n    return new Promise(function (resolve, reject) {\n      loader.loadScript(siteKey, options.useRecaptchaNet || false, options.renderParameters ? options.renderParameters : {}, options.customUrl).then(function () {\n        ReCaptchaLoader.setLoadingState(ELoadingState.LOADED);\n        var widgetID = loader.doExplicitRender(grecaptcha, siteKey, options.explicitRenderParameters ? options.explicitRenderParameters : {});\n        var instance = new ReCaptchaInstance_1.ReCaptchaInstance(siteKey, widgetID, grecaptcha);\n        ReCaptchaLoader.successfulLoadingConsumers.forEach(function (v) {\n          return v(instance);\n        });\n        ReCaptchaLoader.successfulLoadingConsumers = [];\n\n        if (options.autoHideBadge) {\n          instance.hideBadge();\n        }\n\n        ReCaptchaLoader.instance = instance;\n        resolve(instance);\n      }).catch(function (error) {\n        ReCaptchaLoader.errorLoadingRunnable.forEach(function (v) {\n          return v(error);\n        });\n        ReCaptchaLoader.errorLoadingRunnable = [];\n        reject(error);\n      });\n    });\n  };\n\n  ReCaptchaLoader.getInstance = function () {\n    return ReCaptchaLoader.instance;\n  };\n\n  ReCaptchaLoader.setLoadingState = function (state) {\n    ReCaptchaLoader.loadingState = state;\n  };\n\n  ReCaptchaLoader.getLoadingState = function () {\n    if (ReCaptchaLoader.loadingState === null) {\n      return ELoadingState.NOT_LOADED;\n    } else {\n      return ReCaptchaLoader.loadingState;\n    }\n  };\n\n  ReCaptchaLoader.prototype.loadScript = function (siteKey, useRecaptchaNet, renderParameters, customUrl) {\n    var _this = this;\n\n    if (useRecaptchaNet === void 0) {\n      useRecaptchaNet = false;\n    }\n\n    if (renderParameters === void 0) {\n      renderParameters = {};\n    }\n\n    if (customUrl === void 0) {\n      customUrl = '';\n    }\n\n    var scriptElement = document.createElement('script');\n    scriptElement.setAttribute('recaptcha-v3-script', '');\n    var scriptBase = 'https://www.google.com/recaptcha/api.js';\n\n    if (useRecaptchaNet) {\n      scriptBase = 'https://recaptcha.net/recaptcha/api.js';\n    }\n\n    if (customUrl) {\n      scriptBase = customUrl;\n    }\n\n    if (renderParameters.render) {\n      renderParameters.render = undefined;\n    }\n\n    var parametersQuery = this.buildQueryString(renderParameters);\n    scriptElement.src = scriptBase + '?render=explicit' + parametersQuery;\n    return new Promise(function (resolve, reject) {\n      scriptElement.addEventListener('load', _this.waitForScriptToLoad(function () {\n        resolve(scriptElement);\n      }), false);\n\n      scriptElement.onerror = function (error) {\n        ReCaptchaLoader.setLoadingState(ELoadingState.NOT_LOADED);\n        reject(error);\n      };\n\n      document.head.appendChild(scriptElement);\n    });\n  };\n\n  ReCaptchaLoader.prototype.buildQueryString = function (parameters) {\n    var parameterKeys = Object.keys(parameters);\n\n    if (parameterKeys.length < 1) {\n      return '';\n    }\n\n    return '&' + Object.keys(parameters).filter(function (parameterKey) {\n      return !!parameters[parameterKey];\n    }).map(function (parameterKey) {\n      return parameterKey + '=' + parameters[parameterKey];\n    }).join('&');\n  };\n\n  ReCaptchaLoader.prototype.waitForScriptToLoad = function (callback) {\n    var _this = this;\n\n    return function () {\n      if (window.grecaptcha === undefined) {\n        setTimeout(function () {\n          _this.waitForScriptToLoad(callback);\n        }, ReCaptchaLoader.SCRIPT_LOAD_DELAY);\n      } else {\n        window.grecaptcha.ready(function () {\n          callback();\n        });\n      }\n    };\n  };\n\n  ReCaptchaLoader.prototype.doExplicitRender = function (grecaptcha, siteKey, parameters) {\n    var augmentedParameters = {\n      sitekey: siteKey,\n      badge: parameters.badge,\n      size: parameters.size,\n      tabindex: parameters.tabindex\n    };\n\n    if (parameters.container) {\n      return grecaptcha.render(parameters.container, augmentedParameters);\n    } else {\n      return grecaptcha.render(augmentedParameters);\n    }\n  };\n\n  ReCaptchaLoader.loadingState = null;\n  ReCaptchaLoader.instance = null;\n  ReCaptchaLoader.instanceSiteKey = null;\n  ReCaptchaLoader.successfulLoadingConsumers = [];\n  ReCaptchaLoader.errorLoadingRunnable = [];\n  ReCaptchaLoader.SCRIPT_LOAD_DELAY = 25;\n  return ReCaptchaLoader;\n}();\n\nexports.load = ReCaptchaLoader.load;\nexports.getInstance = ReCaptchaLoader.getInstance;","map":null,"metadata":{},"sourceType":"script"}